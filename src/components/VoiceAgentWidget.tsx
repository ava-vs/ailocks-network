'use client';

import { useConversation } from '@elevenlabs/react';
import { Mic, MicOff, Volume2, VolumeX } from 'lucide-react';
import { useState, useCallback, useEffect } from 'react';
import { searchIntents, createIntent, getAilockProfile, gainAilockXp } from '../lib/api';
import toast from 'react-hot-toast';

const AGENT_ID = import.meta.env.PUBLIC_AGENT_ID || import.meta.env.AGENT_ID;

const getSignedUrl = async (): Promise<string> => {
  const response = await fetch('/.netlify/functions/get-elevenlabs-signed-url');
  if (!response.ok) {
    const errorData = await response.json();
    throw new Error(errorData.error || 'Failed to get signed URL');
  }
  const { signedUrl } = await response.json();
  return signedUrl;
};

export default function VoiceAgentWidget() {
  const [isMuted, setIsMuted] = useState(false);
  const [isVisible, setIsVisible] = useState(true);

  const conversation = useConversation({
    onConnect: () => {
      console.log('‚úÖ Voice agent connected');
      toast.success('üé§ Ailock –∞–∫—Ç–∏–≤–µ–Ω!');
    },
    onDisconnect: () => {
      console.log('‚ùå Voice agent disconnected');
      toast('üî¥ –ê–≥–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è');
    },
    onMessage: (message: any) => {
      console.log('üì® Dispatching voice message to main chat:', message);
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç
      window.dispatchEvent(new CustomEvent('add-message-to-chat', { detail: message }));
    },
    onError: (error: any) => {
      console.error('üí• Voice agent error:', error);
      const errorMessage = error ? String(error) : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      toast.error('‚ùå –û—à–∏–±–∫–∞: ' + errorMessage);
    },
  });

  const startConversation = useCallback(async () => {
    // –°–æ–æ–±—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–º—É —á–∞—Ç—É, —á—Ç–æ –Ω–∞—á–∞–ª–∞—Å—å –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è
    window.dispatchEvent(new CustomEvent('voice-session-started'));
    try {
      await navigator.mediaDevices.getUserMedia({ audio: true });
      console.log('üé§ Attempting to start conversation via signed URL...');
      const signedUrl = await getSignedUrl();
      console.log('‚úÖ Got signed URL.');

      await conversation.startSession({
        signedUrl,
        clientTools: {
          search_intents: async ({ query }: any) => {
            console.log(`[Tool] 'search_intents' called with query: "${query}"`);

            // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if (typeof query !== 'string' || !query.trim()) {
              console.warn('[Tool] search_intents called with an invalid query.');
              return "Please provide a valid search query to find intents.";
            }

            try {
              // 2. –í—ã–∑–æ–≤ –Ω–∞—à–µ–≥–æ API
              const results = await searchIntents(query);
              console.log(`[Tool] Found ${results.length} results.`);

              // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ü–û–õ–ù–´–ô —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å
              window.dispatchEvent(new CustomEvent('voice-search-results', { 
                detail: { query, results } 
              }));

              // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¢–û–ü-3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —á–∞—Ç–µ
              window.dispatchEvent(new CustomEvent('display-results-in-chat', { 
                detail: { intents: results.slice(0, 3) } 
              }));

              // 4. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–æ–ø–æ–Ω—è—Ç–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –∞–≥–µ–Ω—Ç–∞
              if (!results || results.length === 0) {
                return `I couldn't find any intents matching "${query}". You can try a different search or create a new intent.`;
              }
              
              const count = results.length;
              const topTitles = results.slice(0, 3).map((r: any) => r.title).join('; ');
              
              // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è LLM
              return `Found ${results.length} intents for "${query}". I have displayed the top results on the screen.`;

            } catch (error) {
              console.error('[Tool] The "search_intents" tool failed:', error);
              return JSON.stringify({ tool: 'search_intents', error: 'Search failed' });
            }
          },
        }
      });
    } catch (error) {
      console.error('üí• Failed to start conversation:', error);
      const errorMessage = error instanceof Error ? error.message : 'Unknown error';
      toast.error(`Start error: ${errorMessage}`);
    }
  }, [conversation]);

  const stopConversation = useCallback(async () => {
    try {
      console.log('‚èπÔ∏è Stopping conversation...');
      await conversation.endSession();
    } catch (error) {
      console.error('üí• Error stopping conversation:', error);
    }
  }, [conversation]);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞—Ä–∏—Ñ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  useEffect(() => {
    const userPlan = localStorage.getItem('userPlan') || 'free';
    if (userPlan === 'free') {
      setIsVisible(false);
      console.log('‚ùå Voice agent hidden - free plan');
    } else {
      console.log('‚úÖ Voice agent visible - plan:', userPlan);
    }
  }, []);

  if (!isVisible) return null;

  return (
    <>
      <div className="fixed bottom-8 right-8 z-50 flex flex-col items-end gap-3">
        {/* Start Button */}
        <button
          onClick={startConversation}
          disabled={conversation.status === 'connected' || conversation.status === 'connecting'}
          className="w-16 h-16 rounded-full flex items-center justify-center text-white shadow-lg bg-blue-600 hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed"
          title="Start Conversation"
        >
          <Mic size={24} />
        </button>

        {/* Stop Button */}
        <button
          onClick={stopConversation}
          disabled={conversation.status !== 'connected'}
          className="w-16 h-16 rounded-full flex items-center justify-center text-white shadow-lg bg-red-500 hover:bg-red-600 disabled:bg-gray-400 disabled:cursor-not-allowed"
          title="Stop Conversation"
        >
          <MicOff size={24} />
        </button>

        {/* Status Indicator */}
        <div className="bg-black bg-opacity-70 text-white text-xs px-3 py-1 rounded-full">
          {`Status: ${conversation.status || 'disconnected'}`}
        </div>
      </div>
    </>
  );
} 